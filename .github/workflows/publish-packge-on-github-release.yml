name: publish-packge-on-github-release

on:
  push:
    tags:
      - "v*"

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Save upload URL
        run: echo "${{ steps.create-release.outputs.upload_url }}" > upload-url.txt
      - uses: actions/upload-artifact@v1
        with:
          name: upload-url
          path: upload-url.txt

  build-and-test:
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macOS-latest
          - windows-latest
    steps:
      - name: Install gnu tools on macOS
        run: |
          brew install gnu-tar
          echo 'export PATH="/usr/local/opt/gnu-tar/libexec/gnubin:$PATH"' >> ~/.bash_profile
        if: matrix.os == 'macOS-latest'

      - uses: actions/checkout@v2

      - name: Restore upload URL from artifact
        uses: actions/download-artifact@v1
        with:
          name: upload-url
      - run: echo "##[set-output name=url;]$(cat upload-url/upload-url.txt)"
        id: upload-url

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Get current LLVM target
        run: echo "##[set-output name=target;]$(rustc --version -v | grep host | cut -d ' ' -f 2)"
        id: current-target

      - name: Test all
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features --no-fail-fast
      - name: Build for release
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - name: Create tar archive on Linux and macOS
        shell: bash -l {0}
        run: |
          echo ${CURRENT_TARGET}
          tar cvzf openssh-authorizedkeyscommand-github.${CURRENT_TARGET}.tar.gz --owner=0 --group=0 -C target/release/ openssh-authorizedkeyscommand-github
        if: matrix.os != 'windows-latest'
        env:
          CURRENT_TARGET: ${{ steps.current-target.outputs.target }}

      - name: Create zip archive on Windows
        shell: pwsh
        run: |
          cd target/release/
          Compress-Archive -Path openssh-authorizedkeyscommand-github.exe -DestinationPath ../../openssh-authorizedkeyscommand-github.${env:CURRENT_TARGET}.zip
          dir
        if: matrix.os == 'windows-latest'
        env:
          CURRENT_TARGET: ${{ steps.current-target.outputs.target }}

      - name: Upload Release Asset for Linux and macOS
        uses: actions/upload-release-asset@v1
        if: matrix.os != 'windows-latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.upload-url.outputs.url }}
          asset_path: openssh-authorizedkeyscommand-github.${{ steps.current-target.outputs.target }}.tar.gz
          asset_name: openssh-authorizedkeyscommand-github.${{ steps.current-target.outputs.target }}.tar.gz
          asset_content_type: application/gzip
      - name: Upload Release Asset for Windows
        uses: actions/upload-release-asset@v1
        if: matrix.os == 'windows-latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CURRENT_TARGET: ${{ steps.current-target.outputs.target }}
        with:
          upload_url: ${{ steps.upload-url.outputs.url }}
          asset_path: openssh-authorizedkeyscommand-github.${{ steps.current-target.outputs.target }}.zip
          asset_name: openssh-authorizedkeyscommand-github.${{ steps.current-target.outputs.target }}.zip
          asset_content_type: application/zip
